generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dias_inhabilitados {
  id_dia_inhabilitado Int      @id @default(autoincrement())
  fecha               DateTime @db.Date
  motivo              String   @db.VarChar
  todo_el_dia         Boolean @default(true)
}

model dias_semana {
  id_dia                 Int                      @id @default(autoincrement())
  nombre_dia             String                   @db.VarChar(9)
  horarios_profesionales horarios_profesionales[]
}

model especialidades {
  id_especialidad     Int             @id @default(autoincrement())
  nombre_especialidad String         @db.VarChar
  profesionales       profesionales[]
}

model estados_turno {
  id_estado_turno     Int      @id @default(autoincrement())
  nombre_estado_turno String  @db.VarChar(25)
  turnos              turnos[]
}

model horarios_profesionales {
  id_horario     Int            @id @default(autoincrement())
  profesional_id Int
  dia_semana_id  Int
  hora_inicio    DateTime      @db.Time(6)
  hora_fin       DateTime      @db.Time(6)
  duracion_turno Int
  dias_semana    dias_semana   @relation(fields: [dia_semana_id], references: [id_dia], onDelete: NoAction, onUpdate: NoAction)
  profesionales  profesionales @relation(fields: [profesional_id], references: [id_profesional], onDelete: NoAction, onUpdate: NoAction)
}

model obras_sociales {
  id_obra_social                   Int                                @id @default(autoincrement())
  nombre_obra_social               String                            @db.VarChar
  pacientes                        pacientes[]
  profesionales_por_obras_sociales profesionales_por_obras_sociales[]
}

model pacientes {
  id_paciente               Int                 @id @default(autoincrement())
  nombre_paciente           String              @db.VarChar(40)
  apellido_paciente         String              @db.VarChar(40)
  sexo_paciente             String              @default("No especificado") @db.VarChar(15)   
  email_paciente            String?             @db.VarChar(150)
  dni_paciente              String              @db.VarChar(8)
  telefono_paciente         String              @db.VarChar(20)
  fecha_nacimiento_paciente DateTime            @db.Date
  fecha_alta_paciente       DateTime            @default(now()) @db.Date
  direccion_paciente        String?             @db.VarChar
  obra_social_id            Int
  obras_sociales            obras_sociales      @relation(fields: [obra_social_id], references: [id_obra_social], onDelete: NoAction, onUpdate: NoAction)
  registros_clinicos        registros_clinicos[]
  turnos                    turnos[]
}

model profesionales {
  id_profesional                   Int                                @id @default(autoincrement())
  usuario_id                       Int                               @unique
  matricula_profesional            String                            @unique @db.VarChar
  especialidad_id                  Int
  horarios_profesionales           horarios_profesionales[]
  especialidades                   especialidades                    @relation(fields: [especialidad_id], references: [id_especialidad], onDelete: NoAction, onUpdate: NoAction)
  usuarios                         usuarios                          @relation(fields: [usuario_id], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  profesionales_por_obras_sociales profesionales_por_obras_sociales[]
  registros_clinicos               registros_clinicos[]
  turnos                           turnos[]
}

model profesionales_por_obras_sociales {
  id_profesional_obra Int             @id @default(autoincrement())
  profesional_id      Int
  obra_social_id      Int
  obras_sociales      obras_sociales @relation(fields: [obra_social_id], references: [id_obra_social], onDelete: NoAction, onUpdate: NoAction)
  profesionales       profesionales  @relation(fields: [profesional_id], references: [id_profesional], onDelete: NoAction, onUpdate: NoAction)
}

model registros_clinicos {
  id_registro      Int            @id @default(autoincrement())
  paciente_id      Int
  turno_id         Int
  profesional_id   Int
  texto_comentario String?
  texto_indicacion String?
  fecha_registro   DateTime      @db.Timestamp(6)
  pacientes        pacientes     @relation(fields: [paciente_id], references: [id_paciente], onDelete: NoAction, onUpdate: NoAction)
  profesionales    profesionales @relation(fields: [profesional_id], references: [id_profesional], onDelete: NoAction, onUpdate: NoAction)
  turnos           turnos        @relation(fields: [turno_id], references: [id_turno], onDelete: NoAction, onUpdate: NoAction)
}

model roles {
  id_rol     Int        @id @default(autoincrement())
  nombre_rol String     @unique @db.VarChar
  usuarios   usuarios[]
}

model tipos_consulta {
  id_tipo_consulta     Int      @id @default(autoincrement())
  nombre_tipo_consulta String  @db.VarChar(40)
  turnos               turnos[]
}

model turnos {
  id_turno                 Int                  @id @default(autoincrement())
  paciente_id              Int
  profesional_id           Int
  fecha_turno              DateTime             @db.Date
  hora_turno               DateTime             @db.Time(6)
  estado_turno_id          Int                  @default(2)      // 2 = CONFIRMADO por defecto
  tipo_consulta_id         Int
  fecha_agendamiento_turno DateTime            @db.Timestamp(6)
  creado_por_usuario_id    Int?
  
  registros_clinicos       registros_clinicos[]
  usuarios                 usuarios?            @relation(fields: [creado_por_usuario_id], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction)
  estados_turno            estados_turno       @relation(fields: [estado_turno_id], references: [id_estado_turno], onDelete: NoAction, onUpdate: NoAction)
  pacientes                pacientes           @relation(fields: [paciente_id], references: [id_paciente], onDelete: NoAction, onUpdate: NoAction)
  profesionales            profesionales       @relation(fields: [profesional_id], references: [id_profesional], onDelete: NoAction, onUpdate: NoAction)
  tipos_consulta           tipos_consulta      @relation(fields: [tipo_consulta_id], references: [id_tipo_consulta], onDelete: NoAction, onUpdate: NoAction)
}

model usuarios {
  id_usuario            Int            @id @default(autoincrement())
  nombre_usuario        String        @db.VarChar(40)
  apellido_usuario      String        @db.VarChar(40)
  dni_usuario           String        @db.VarChar(8)
  email_usuario         String          @unique @db.VarChar(150)
  password_hash_usuario String        @db.VarChar
  rol_id                Int
  profesionales         profesionales?
  turnos                turnos[]
  roles                 roles         @relation(fields: [rol_id], references: [id_rol], onDelete: NoAction, onUpdate: NoAction)
}
